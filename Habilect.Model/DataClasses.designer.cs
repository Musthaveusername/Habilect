#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Habilect.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="habtest")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttempt(Attempt instance);
    partial void UpdateAttempt(Attempt instance);
    partial void DeleteAttempt(Attempt instance);
    partial void InsertCourseMotion(CourseMotion instance);
    partial void UpdateCourseMotion(CourseMotion instance);
    partial void DeleteCourseMotion(CourseMotion instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertMotion(Motion instance);
    partial void UpdateMotion(Motion instance);
    partial void DeleteMotion(Motion instance);
    partial void InsertMotionTemplate(MotionTemplate instance);
    partial void UpdateMotionTemplate(MotionTemplate instance);
    partial void DeleteMotionTemplate(MotionTemplate instance);
    partial void InsertPatientCourse(PatientCourse instance);
    partial void UpdatePatientCourse(PatientCourse instance);
    partial void DeletePatientCourse(PatientCourse instance);
    partial void InsertPatientDiagnostic(PatientDiagnostic instance);
    partial void UpdatePatientDiagnostic(PatientDiagnostic instance);
    partial void DeletePatientDiagnostic(PatientDiagnostic instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPatientSchedule(PatientSchedule instance);
    partial void UpdatePatientSchedule(PatientSchedule instance);
    partial void DeletePatientSchedule(PatientSchedule instance);
    partial void InsertSession(Session instance);
    partial void UpdateSession(Session instance);
    partial void DeleteSession(Session instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::Habilect.Model.Properties.Settings.Default.habtestConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attempt> Attempts
		{
			get
			{
				return this.GetTable<Attempt>();
			}
		}
		
		public System.Data.Linq.Table<CourseMotion> CourseMotions
		{
			get
			{
				return this.GetTable<CourseMotion>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Motion> Motions
		{
			get
			{
				return this.GetTable<Motion>();
			}
		}
		
		public System.Data.Linq.Table<MotionTemplate> MotionTemplates
		{
			get
			{
				return this.GetTable<MotionTemplate>();
			}
		}
		
		public System.Data.Linq.Table<PatientCourse> PatientCourses
		{
			get
			{
				return this.GetTable<PatientCourse>();
			}
		}
		
		public System.Data.Linq.Table<PatientDiagnostic> PatientDiagnostics
		{
			get
			{
				return this.GetTable<PatientDiagnostic>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<PatientSchedule> PatientSchedules
		{
			get
			{
				return this.GetTable<PatientSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Session> Sessions
		{
			get
			{
				return this.GetTable<Session>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attempts")]
	public partial class Attempt : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MotionId;
		
		private int _SessionId;
		
		private double _MaxAngle;
		
		private double _MaxProgress;
		
		private System.TimeSpan _CompletedTime;
		
		private double _Velocity;
		
		private string _FinishedBy;
		
		private double _PlaneAngle;
		
		private double _SpinalAngle;
		
		private double _ShoulderAngle;
		
		private EntityRef<Motion> _Motion;
		
		private EntityRef<Session> _Session;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMotionIdChanging(int value);
    partial void OnMotionIdChanged();
    partial void OnSessionIdChanging(int value);
    partial void OnSessionIdChanged();
    partial void OnMaxAngleChanging(double value);
    partial void OnMaxAngleChanged();
    partial void OnMaxProgressChanging(double value);
    partial void OnMaxProgressChanged();
    partial void OnCompletedTimeChanging(System.TimeSpan value);
    partial void OnCompletedTimeChanged();
    partial void OnVelocityChanging(double value);
    partial void OnVelocityChanged();
    partial void OnFinishedByChanging(string value);
    partial void OnFinishedByChanged();
    partial void OnPlaneAngleChanging(double value);
    partial void OnPlaneAngleChanged();
    partial void OnSpinalAngleChanging(double value);
    partial void OnSpinalAngleChanged();
    partial void OnShoulderAngleChanging(double value);
    partial void OnShoulderAngleChanged();
    #endregion
		
		public Attempt()
		{
			this._Motion = default(EntityRef<Motion>);
			this._Session = default(EntityRef<Session>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotionId", DbType="Int NOT NULL")]
		public int MotionId
		{
			get
			{
				return this._MotionId;
			}
			set
			{
				if ((this._MotionId != value))
				{
					if (this._Motion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMotionIdChanging(value);
					this.SendPropertyChanging();
					this._MotionId = value;
					this.SendPropertyChanged("MotionId");
					this.OnMotionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionId", DbType="Int NOT NULL")]
		public int SessionId
		{
			get
			{
				return this._SessionId;
			}
			set
			{
				if ((this._SessionId != value))
				{
					if (this._Session.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSessionIdChanging(value);
					this.SendPropertyChanging();
					this._SessionId = value;
					this.SendPropertyChanged("SessionId");
					this.OnSessionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAngle", DbType="Float NOT NULL")]
		public double MaxAngle
		{
			get
			{
				return this._MaxAngle;
			}
			set
			{
				if ((this._MaxAngle != value))
				{
					this.OnMaxAngleChanging(value);
					this.SendPropertyChanging();
					this._MaxAngle = value;
					this.SendPropertyChanged("MaxAngle");
					this.OnMaxAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxProgress", DbType="Float NOT NULL")]
		public double MaxProgress
		{
			get
			{
				return this._MaxProgress;
			}
			set
			{
				if ((this._MaxProgress != value))
				{
					this.OnMaxProgressChanging(value);
					this.SendPropertyChanging();
					this._MaxProgress = value;
					this.SendPropertyChanged("MaxProgress");
					this.OnMaxProgressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletedTime", DbType="Time NOT NULL")]
		public System.TimeSpan CompletedTime
		{
			get
			{
				return this._CompletedTime;
			}
			set
			{
				if ((this._CompletedTime != value))
				{
					this.OnCompletedTimeChanging(value);
					this.SendPropertyChanging();
					this._CompletedTime = value;
					this.SendPropertyChanged("CompletedTime");
					this.OnCompletedTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Velocity", DbType="Float NOT NULL")]
		public double Velocity
		{
			get
			{
				return this._Velocity;
			}
			set
			{
				if ((this._Velocity != value))
				{
					this.OnVelocityChanging(value);
					this.SendPropertyChanging();
					this._Velocity = value;
					this.SendPropertyChanged("Velocity");
					this.OnVelocityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishedBy", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FinishedBy
		{
			get
			{
				return this._FinishedBy;
			}
			set
			{
				if ((this._FinishedBy != value))
				{
					this.OnFinishedByChanging(value);
					this.SendPropertyChanging();
					this._FinishedBy = value;
					this.SendPropertyChanged("FinishedBy");
					this.OnFinishedByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaneAngle", DbType="Float NOT NULL")]
		public double PlaneAngle
		{
			get
			{
				return this._PlaneAngle;
			}
			set
			{
				if ((this._PlaneAngle != value))
				{
					this.OnPlaneAngleChanging(value);
					this.SendPropertyChanging();
					this._PlaneAngle = value;
					this.SendPropertyChanged("PlaneAngle");
					this.OnPlaneAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpinalAngle", DbType="Float NOT NULL")]
		public double SpinalAngle
		{
			get
			{
				return this._SpinalAngle;
			}
			set
			{
				if ((this._SpinalAngle != value))
				{
					this.OnSpinalAngleChanging(value);
					this.SendPropertyChanging();
					this._SpinalAngle = value;
					this.SendPropertyChanged("SpinalAngle");
					this.OnSpinalAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShoulderAngle", DbType="Float NOT NULL")]
		public double ShoulderAngle
		{
			get
			{
				return this._ShoulderAngle;
			}
			set
			{
				if ((this._ShoulderAngle != value))
				{
					this.OnShoulderAngleChanging(value);
					this.SendPropertyChanging();
					this._ShoulderAngle = value;
					this.SendPropertyChanged("ShoulderAngle");
					this.OnShoulderAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Motion_Attempt", Storage="_Motion", ThisKey="MotionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Motion Motion
		{
			get
			{
				return this._Motion.Entity;
			}
			set
			{
				Motion previousValue = this._Motion.Entity;
				if (((previousValue != value) 
							|| (this._Motion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Motion.Entity = null;
						previousValue.Attempts.Remove(this);
					}
					this._Motion.Entity = value;
					if ((value != null))
					{
						value.Attempts.Add(this);
						this._MotionId = value.Id;
					}
					else
					{
						this._MotionId = default(int);
					}
					this.SendPropertyChanged("Motion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Attempt", Storage="_Session", ThisKey="SessionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Session Session
		{
			get
			{
				return this._Session.Entity;
			}
			set
			{
				Session previousValue = this._Session.Entity;
				if (((previousValue != value) 
							|| (this._Session.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Session.Entity = null;
						previousValue.Attempts.Remove(this);
					}
					this._Session.Entity = value;
					if ((value != null))
					{
						value.Attempts.Add(this);
						this._SessionId = value.Id;
					}
					else
					{
						this._SessionId = default(int);
					}
					this.SendPropertyChanged("Session");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseMotions")]
	public partial class CourseMotion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourseId;
		
		private int _MotionId;
		
		private int _RequiredCount;
		
		private int _MotionOrder;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Motion> _Motion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnMotionIdChanging(int value);
    partial void OnMotionIdChanged();
    partial void OnRequiredCountChanging(int value);
    partial void OnRequiredCountChanged();
    partial void OnMotionOrderChanging(int value);
    partial void OnMotionOrderChanged();
    #endregion
		
		public CourseMotion()
		{
			this._Course = default(EntityRef<Course>);
			this._Motion = default(EntityRef<Motion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotionId", DbType="Int NOT NULL")]
		public int MotionId
		{
			get
			{
				return this._MotionId;
			}
			set
			{
				if ((this._MotionId != value))
				{
					if (this._Motion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMotionIdChanging(value);
					this.SendPropertyChanging();
					this._MotionId = value;
					this.SendPropertyChanged("MotionId");
					this.OnMotionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredCount", DbType="Int NOT NULL")]
		public int RequiredCount
		{
			get
			{
				return this._RequiredCount;
			}
			set
			{
				if ((this._RequiredCount != value))
				{
					this.OnRequiredCountChanging(value);
					this.SendPropertyChanging();
					this._RequiredCount = value;
					this.SendPropertyChanged("RequiredCount");
					this.OnRequiredCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotionOrder", DbType="Int NOT NULL")]
		public int MotionOrder
		{
			get
			{
				return this._MotionOrder;
			}
			set
			{
				if ((this._MotionOrder != value))
				{
					this.OnMotionOrderChanging(value);
					this.SendPropertyChanging();
					this._MotionOrder = value;
					this.SendPropertyChanged("MotionOrder");
					this.OnMotionOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseMotion", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseMotions.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseMotions.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Motion_CourseMotion", Storage="_Motion", ThisKey="MotionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Motion Motion
		{
			get
			{
				return this._Motion.Entity;
			}
			set
			{
				Motion previousValue = this._Motion.Entity;
				if (((previousValue != value) 
							|| (this._Motion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Motion.Entity = null;
						previousValue.CourseMotions.Remove(this);
					}
					this._Motion.Entity = value;
					if ((value != null))
					{
						value.CourseMotions.Add(this);
						this._MotionId = value.Id;
					}
					else
					{
						this._MotionId = default(int);
					}
					this.SendPropertyChanged("Motion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<CourseMotion> _CourseMotions;
		
		private EntitySet<PatientCourse> _PatientCourses;
		
		private EntitySet<PatientSchedule> _PatientSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Course()
		{
			this._CourseMotions = new EntitySet<CourseMotion>(new Action<CourseMotion>(this.attach_CourseMotions), new Action<CourseMotion>(this.detach_CourseMotions));
			this._PatientCourses = new EntitySet<PatientCourse>(new Action<PatientCourse>(this.attach_PatientCourses), new Action<PatientCourse>(this.detach_PatientCourses));
			this._PatientSchedules = new EntitySet<PatientSchedule>(new Action<PatientSchedule>(this.attach_PatientSchedules), new Action<PatientSchedule>(this.detach_PatientSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseMotion", Storage="_CourseMotions", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<CourseMotion> CourseMotions
		{
			get
			{
				return this._CourseMotions;
			}
			set
			{
				this._CourseMotions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PatientCourse", Storage="_PatientCourses", ThisKey="Id", OtherKey="CourceId")]
		public EntitySet<PatientCourse> PatientCourses
		{
			get
			{
				return this._PatientCourses;
			}
			set
			{
				this._PatientCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PatientSchedule", Storage="_PatientSchedules", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<PatientSchedule> PatientSchedules
		{
			get
			{
				return this._PatientSchedules;
			}
			set
			{
				this._PatientSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseMotions(CourseMotion entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseMotions(CourseMotion entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_PatientCourses(PatientCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_PatientCourses(PatientCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_PatientSchedules(PatientSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_PatientSchedules(PatientSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Motions")]
	public partial class Motion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _StartAngle;
		
		private int _EndAngle;
		
		private bool _CheckSpinalBalance;
		
		private bool _CheckShoulderBalance;
		
		private int _ShoulderDeviation;
		
		private int _PlaneDeviation;
		
		private int _SpinalDeviation;
		
		private int _MotionTemplateId;
		
		private EntitySet<Attempt> _Attempts;
		
		private EntitySet<CourseMotion> _CourseMotions;
		
		private EntityRef<MotionTemplate> _MotionTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartAngleChanging(int value);
    partial void OnStartAngleChanged();
    partial void OnEndAngleChanging(int value);
    partial void OnEndAngleChanged();
    partial void OnCheckSpinalBalanceChanging(bool value);
    partial void OnCheckSpinalBalanceChanged();
    partial void OnCheckShoulderBalanceChanging(bool value);
    partial void OnCheckShoulderBalanceChanged();
    partial void OnShoulderDeviationChanging(int value);
    partial void OnShoulderDeviationChanged();
    partial void OnPlaneDeviationChanging(int value);
    partial void OnPlaneDeviationChanged();
    partial void OnSpinalDeviationChanging(int value);
    partial void OnSpinalDeviationChanged();
    partial void OnMotionTemplateIdChanging(int value);
    partial void OnMotionTemplateIdChanged();
    #endregion
		
		public Motion()
		{
			this._Attempts = new EntitySet<Attempt>(new Action<Attempt>(this.attach_Attempts), new Action<Attempt>(this.detach_Attempts));
			this._CourseMotions = new EntitySet<CourseMotion>(new Action<CourseMotion>(this.attach_CourseMotions), new Action<CourseMotion>(this.detach_CourseMotions));
			this._MotionTemplate = default(EntityRef<MotionTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartAngle", DbType="Int NOT NULL")]
		public int StartAngle
		{
			get
			{
				return this._StartAngle;
			}
			set
			{
				if ((this._StartAngle != value))
				{
					this.OnStartAngleChanging(value);
					this.SendPropertyChanging();
					this._StartAngle = value;
					this.SendPropertyChanged("StartAngle");
					this.OnStartAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndAngle", DbType="Int NOT NULL")]
		public int EndAngle
		{
			get
			{
				return this._EndAngle;
			}
			set
			{
				if ((this._EndAngle != value))
				{
					this.OnEndAngleChanging(value);
					this.SendPropertyChanging();
					this._EndAngle = value;
					this.SendPropertyChanged("EndAngle");
					this.OnEndAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckSpinalBalance", DbType="Bit NOT NULL")]
		public bool CheckSpinalBalance
		{
			get
			{
				return this._CheckSpinalBalance;
			}
			set
			{
				if ((this._CheckSpinalBalance != value))
				{
					this.OnCheckSpinalBalanceChanging(value);
					this.SendPropertyChanging();
					this._CheckSpinalBalance = value;
					this.SendPropertyChanged("CheckSpinalBalance");
					this.OnCheckSpinalBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CheckShoulderBalance", DbType="Bit NOT NULL")]
		public bool CheckShoulderBalance
		{
			get
			{
				return this._CheckShoulderBalance;
			}
			set
			{
				if ((this._CheckShoulderBalance != value))
				{
					this.OnCheckShoulderBalanceChanging(value);
					this.SendPropertyChanging();
					this._CheckShoulderBalance = value;
					this.SendPropertyChanged("CheckShoulderBalance");
					this.OnCheckShoulderBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShoulderDeviation", DbType="Int NOT NULL")]
		public int ShoulderDeviation
		{
			get
			{
				return this._ShoulderDeviation;
			}
			set
			{
				if ((this._ShoulderDeviation != value))
				{
					this.OnShoulderDeviationChanging(value);
					this.SendPropertyChanging();
					this._ShoulderDeviation = value;
					this.SendPropertyChanged("ShoulderDeviation");
					this.OnShoulderDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaneDeviation", DbType="Int NOT NULL")]
		public int PlaneDeviation
		{
			get
			{
				return this._PlaneDeviation;
			}
			set
			{
				if ((this._PlaneDeviation != value))
				{
					this.OnPlaneDeviationChanging(value);
					this.SendPropertyChanging();
					this._PlaneDeviation = value;
					this.SendPropertyChanged("PlaneDeviation");
					this.OnPlaneDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpinalDeviation", DbType="Int NOT NULL")]
		public int SpinalDeviation
		{
			get
			{
				return this._SpinalDeviation;
			}
			set
			{
				if ((this._SpinalDeviation != value))
				{
					this.OnSpinalDeviationChanging(value);
					this.SendPropertyChanging();
					this._SpinalDeviation = value;
					this.SendPropertyChanged("SpinalDeviation");
					this.OnSpinalDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotionTemplateId", DbType="Int NOT NULL")]
		public int MotionTemplateId
		{
			get
			{
				return this._MotionTemplateId;
			}
			set
			{
				if ((this._MotionTemplateId != value))
				{
					if (this._MotionTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMotionTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._MotionTemplateId = value;
					this.SendPropertyChanged("MotionTemplateId");
					this.OnMotionTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Motion_Attempt", Storage="_Attempts", ThisKey="Id", OtherKey="MotionId")]
		public EntitySet<Attempt> Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				this._Attempts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Motion_CourseMotion", Storage="_CourseMotions", ThisKey="Id", OtherKey="MotionId")]
		public EntitySet<CourseMotion> CourseMotions
		{
			get
			{
				return this._CourseMotions;
			}
			set
			{
				this._CourseMotions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MotionTemplate_Motion", Storage="_MotionTemplate", ThisKey="MotionTemplateId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MotionTemplate MotionTemplate
		{
			get
			{
				return this._MotionTemplate.Entity;
			}
			set
			{
				MotionTemplate previousValue = this._MotionTemplate.Entity;
				if (((previousValue != value) 
							|| (this._MotionTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MotionTemplate.Entity = null;
						previousValue.Motions.Remove(this);
					}
					this._MotionTemplate.Entity = value;
					if ((value != null))
					{
						value.Motions.Add(this);
						this._MotionTemplateId = value.Id;
					}
					else
					{
						this._MotionTemplateId = default(int);
					}
					this.SendPropertyChanged("MotionTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attempts(Attempt entity)
		{
			this.SendPropertyChanging();
			entity.Motion = this;
		}
		
		private void detach_Attempts(Attempt entity)
		{
			this.SendPropertyChanging();
			entity.Motion = null;
		}
		
		private void attach_CourseMotions(CourseMotion entity)
		{
			this.SendPropertyChanging();
			entity.Motion = this;
		}
		
		private void detach_CourseMotions(CourseMotion entity)
		{
			this.SendPropertyChanging();
			entity.Motion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MotionTemplates")]
	public partial class MotionTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Icon;
		
		private string _RotationPlane;
		
		private string _AxisJoint;
		
		private string _RimJoint;
		
		private string _RimJoint2;
		
		private int _DefaultStartAngle;
		
		private int _MinStartAngle;
		
		private int _DefaultEndAngle;
		
		private int _MaxEndAngle;
		
		private int _StartDeviation;
		
		private System.Nullable<int> _EndDeviation;
		
		private int _DefaultPlaneDeviation;
		
		private int _DefaultSpinalDeviation;
		
		private int _DefaultShoulderDeviation;
		
		private bool _DefaultCheckSpinalBalance;
		
		private bool _DefaultCheckShoulderBalance;
		
		private int _ViewStartAngle;
		
		private int _DefaultRequiredCount;
		
		private int _Direction;
		
		private string _InstructionIcon;
		
		private EntitySet<Motion> _Motions;
		
		private EntitySet<PatientDiagnostic> _PatientDiagnostics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnRotationPlaneChanging(string value);
    partial void OnRotationPlaneChanged();
    partial void OnAxisJointChanging(string value);
    partial void OnAxisJointChanged();
    partial void OnRimJointChanging(string value);
    partial void OnRimJointChanged();
    partial void OnRimJoint2Changing(string value);
    partial void OnRimJoint2Changed();
    partial void OnDefaultStartAngleChanging(int value);
    partial void OnDefaultStartAngleChanged();
    partial void OnMinStartAngleChanging(int value);
    partial void OnMinStartAngleChanged();
    partial void OnDefaultEndAngleChanging(int value);
    partial void OnDefaultEndAngleChanged();
    partial void OnMaxEndAngleChanging(int value);
    partial void OnMaxEndAngleChanged();
    partial void OnStartDeviationChanging(int value);
    partial void OnStartDeviationChanged();
    partial void OnEndDeviationChanging(System.Nullable<int> value);
    partial void OnEndDeviationChanged();
    partial void OnDefaultPlaneDeviationChanging(int value);
    partial void OnDefaultPlaneDeviationChanged();
    partial void OnDefaultSpinalDeviationChanging(int value);
    partial void OnDefaultSpinalDeviationChanged();
    partial void OnDefaultShoulderDeviationChanging(int value);
    partial void OnDefaultShoulderDeviationChanged();
    partial void OnDefaultCheckSpinalBalanceChanging(bool value);
    partial void OnDefaultCheckSpinalBalanceChanged();
    partial void OnDefaultCheckShoulderBalanceChanging(bool value);
    partial void OnDefaultCheckShoulderBalanceChanged();
    partial void OnViewStartAngleChanging(int value);
    partial void OnViewStartAngleChanged();
    partial void OnDefaultRequiredCountChanging(int value);
    partial void OnDefaultRequiredCountChanged();
    partial void OnDirectionChanging(int value);
    partial void OnDirectionChanged();
    partial void OnInstructionIconChanging(string value);
    partial void OnInstructionIconChanged();
    #endregion
		
		public MotionTemplate()
		{
			this._Motions = new EntitySet<Motion>(new Action<Motion>(this.attach_Motions), new Action<Motion>(this.detach_Motions));
			this._PatientDiagnostics = new EntitySet<PatientDiagnostic>(new Action<PatientDiagnostic>(this.attach_PatientDiagnostics), new Action<PatientDiagnostic>(this.detach_PatientDiagnostics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RotationPlane", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string RotationPlane
		{
			get
			{
				return this._RotationPlane;
			}
			set
			{
				if ((this._RotationPlane != value))
				{
					this.OnRotationPlaneChanging(value);
					this.SendPropertyChanging();
					this._RotationPlane = value;
					this.SendPropertyChanged("RotationPlane");
					this.OnRotationPlaneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AxisJoint", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AxisJoint
		{
			get
			{
				return this._AxisJoint;
			}
			set
			{
				if ((this._AxisJoint != value))
				{
					this.OnAxisJointChanging(value);
					this.SendPropertyChanging();
					this._AxisJoint = value;
					this.SendPropertyChanged("AxisJoint");
					this.OnAxisJointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RimJoint", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RimJoint
		{
			get
			{
				return this._RimJoint;
			}
			set
			{
				if ((this._RimJoint != value))
				{
					this.OnRimJointChanging(value);
					this.SendPropertyChanging();
					this._RimJoint = value;
					this.SendPropertyChanged("RimJoint");
					this.OnRimJointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RimJoint2", DbType="NVarChar(100)")]
		public string RimJoint2
		{
			get
			{
				return this._RimJoint2;
			}
			set
			{
				if ((this._RimJoint2 != value))
				{
					this.OnRimJoint2Changing(value);
					this.SendPropertyChanging();
					this._RimJoint2 = value;
					this.SendPropertyChanged("RimJoint2");
					this.OnRimJoint2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultStartAngle", DbType="Int NOT NULL")]
		public int DefaultStartAngle
		{
			get
			{
				return this._DefaultStartAngle;
			}
			set
			{
				if ((this._DefaultStartAngle != value))
				{
					this.OnDefaultStartAngleChanging(value);
					this.SendPropertyChanging();
					this._DefaultStartAngle = value;
					this.SendPropertyChanged("DefaultStartAngle");
					this.OnDefaultStartAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinStartAngle", DbType="Int NOT NULL")]
		public int MinStartAngle
		{
			get
			{
				return this._MinStartAngle;
			}
			set
			{
				if ((this._MinStartAngle != value))
				{
					this.OnMinStartAngleChanging(value);
					this.SendPropertyChanging();
					this._MinStartAngle = value;
					this.SendPropertyChanged("MinStartAngle");
					this.OnMinStartAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultEndAngle", DbType="Int NOT NULL")]
		public int DefaultEndAngle
		{
			get
			{
				return this._DefaultEndAngle;
			}
			set
			{
				if ((this._DefaultEndAngle != value))
				{
					this.OnDefaultEndAngleChanging(value);
					this.SendPropertyChanging();
					this._DefaultEndAngle = value;
					this.SendPropertyChanged("DefaultEndAngle");
					this.OnDefaultEndAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxEndAngle", DbType="Int NOT NULL")]
		public int MaxEndAngle
		{
			get
			{
				return this._MaxEndAngle;
			}
			set
			{
				if ((this._MaxEndAngle != value))
				{
					this.OnMaxEndAngleChanging(value);
					this.SendPropertyChanging();
					this._MaxEndAngle = value;
					this.SendPropertyChanged("MaxEndAngle");
					this.OnMaxEndAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDeviation", DbType="Int NOT NULL")]
		public int StartDeviation
		{
			get
			{
				return this._StartDeviation;
			}
			set
			{
				if ((this._StartDeviation != value))
				{
					this.OnStartDeviationChanging(value);
					this.SendPropertyChanging();
					this._StartDeviation = value;
					this.SendPropertyChanged("StartDeviation");
					this.OnStartDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDeviation", DbType="Int")]
		public System.Nullable<int> EndDeviation
		{
			get
			{
				return this._EndDeviation;
			}
			set
			{
				if ((this._EndDeviation != value))
				{
					this.OnEndDeviationChanging(value);
					this.SendPropertyChanging();
					this._EndDeviation = value;
					this.SendPropertyChanged("EndDeviation");
					this.OnEndDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultPlaneDeviation", DbType="Int NOT NULL")]
		public int DefaultPlaneDeviation
		{
			get
			{
				return this._DefaultPlaneDeviation;
			}
			set
			{
				if ((this._DefaultPlaneDeviation != value))
				{
					this.OnDefaultPlaneDeviationChanging(value);
					this.SendPropertyChanging();
					this._DefaultPlaneDeviation = value;
					this.SendPropertyChanged("DefaultPlaneDeviation");
					this.OnDefaultPlaneDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultSpinalDeviation", DbType="Int NOT NULL")]
		public int DefaultSpinalDeviation
		{
			get
			{
				return this._DefaultSpinalDeviation;
			}
			set
			{
				if ((this._DefaultSpinalDeviation != value))
				{
					this.OnDefaultSpinalDeviationChanging(value);
					this.SendPropertyChanging();
					this._DefaultSpinalDeviation = value;
					this.SendPropertyChanged("DefaultSpinalDeviation");
					this.OnDefaultSpinalDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultShoulderDeviation", DbType="Int NOT NULL")]
		public int DefaultShoulderDeviation
		{
			get
			{
				return this._DefaultShoulderDeviation;
			}
			set
			{
				if ((this._DefaultShoulderDeviation != value))
				{
					this.OnDefaultShoulderDeviationChanging(value);
					this.SendPropertyChanging();
					this._DefaultShoulderDeviation = value;
					this.SendPropertyChanged("DefaultShoulderDeviation");
					this.OnDefaultShoulderDeviationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultCheckSpinalBalance", DbType="Bit NOT NULL")]
		public bool DefaultCheckSpinalBalance
		{
			get
			{
				return this._DefaultCheckSpinalBalance;
			}
			set
			{
				if ((this._DefaultCheckSpinalBalance != value))
				{
					this.OnDefaultCheckSpinalBalanceChanging(value);
					this.SendPropertyChanging();
					this._DefaultCheckSpinalBalance = value;
					this.SendPropertyChanged("DefaultCheckSpinalBalance");
					this.OnDefaultCheckSpinalBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultCheckShoulderBalance", DbType="Bit NOT NULL")]
		public bool DefaultCheckShoulderBalance
		{
			get
			{
				return this._DefaultCheckShoulderBalance;
			}
			set
			{
				if ((this._DefaultCheckShoulderBalance != value))
				{
					this.OnDefaultCheckShoulderBalanceChanging(value);
					this.SendPropertyChanging();
					this._DefaultCheckShoulderBalance = value;
					this.SendPropertyChanged("DefaultCheckShoulderBalance");
					this.OnDefaultCheckShoulderBalanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewStartAngle", DbType="Int NOT NULL")]
		public int ViewStartAngle
		{
			get
			{
				return this._ViewStartAngle;
			}
			set
			{
				if ((this._ViewStartAngle != value))
				{
					this.OnViewStartAngleChanging(value);
					this.SendPropertyChanging();
					this._ViewStartAngle = value;
					this.SendPropertyChanged("ViewStartAngle");
					this.OnViewStartAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DefaultRequiredCount", DbType="Int NOT NULL")]
		public int DefaultRequiredCount
		{
			get
			{
				return this._DefaultRequiredCount;
			}
			set
			{
				if ((this._DefaultRequiredCount != value))
				{
					this.OnDefaultRequiredCountChanging(value);
					this.SendPropertyChanging();
					this._DefaultRequiredCount = value;
					this.SendPropertyChanged("DefaultRequiredCount");
					this.OnDefaultRequiredCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Direction", DbType="Int NOT NULL")]
		public int Direction
		{
			get
			{
				return this._Direction;
			}
			set
			{
				if ((this._Direction != value))
				{
					this.OnDirectionChanging(value);
					this.SendPropertyChanging();
					this._Direction = value;
					this.SendPropertyChanged("Direction");
					this.OnDirectionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstructionIcon", DbType="NVarChar(255)")]
		public string InstructionIcon
		{
			get
			{
				return this._InstructionIcon;
			}
			set
			{
				if ((this._InstructionIcon != value))
				{
					this.OnInstructionIconChanging(value);
					this.SendPropertyChanging();
					this._InstructionIcon = value;
					this.SendPropertyChanged("InstructionIcon");
					this.OnInstructionIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MotionTemplate_Motion", Storage="_Motions", ThisKey="Id", OtherKey="MotionTemplateId")]
		public EntitySet<Motion> Motions
		{
			get
			{
				return this._Motions;
			}
			set
			{
				this._Motions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MotionTemplate_PatientDiagnostic", Storage="_PatientDiagnostics", ThisKey="Id", OtherKey="MotionTemplateId")]
		public EntitySet<PatientDiagnostic> PatientDiagnostics
		{
			get
			{
				return this._PatientDiagnostics;
			}
			set
			{
				this._PatientDiagnostics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Motions(Motion entity)
		{
			this.SendPropertyChanging();
			entity.MotionTemplate = this;
		}
		
		private void detach_Motions(Motion entity)
		{
			this.SendPropertyChanging();
			entity.MotionTemplate = null;
		}
		
		private void attach_PatientDiagnostics(PatientDiagnostic entity)
		{
			this.SendPropertyChanging();
			entity.MotionTemplate = this;
		}
		
		private void detach_PatientDiagnostics(PatientDiagnostic entity)
		{
			this.SendPropertyChanging();
			entity.MotionTemplate = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientCourses")]
	public partial class PatientCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PatientId;
		
		private int _CourceId;
		
		private int _PatientCourseOrder;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnCourceIdChanging(int value);
    partial void OnCourceIdChanged();
    partial void OnPatientCourseOrderChanging(int value);
    partial void OnPatientCourseOrderChanged();
    #endregion
		
		public PatientCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourceId
		{
			get
			{
				return this._CourceId;
			}
			set
			{
				if ((this._CourceId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourceIdChanging(value);
					this.SendPropertyChanging();
					this._CourceId = value;
					this.SendPropertyChanged("CourceId");
					this.OnCourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientCourseOrder", DbType="Int NOT NULL")]
		public int PatientCourseOrder
		{
			get
			{
				return this._PatientCourseOrder;
			}
			set
			{
				if ((this._PatientCourseOrder != value))
				{
					this.OnPatientCourseOrderChanging(value);
					this.SendPropertyChanging();
					this._PatientCourseOrder = value;
					this.SendPropertyChanged("PatientCourseOrder");
					this.OnPatientCourseOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PatientCourse", Storage="_Course", ThisKey="CourceId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.PatientCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.PatientCourses.Add(this);
						this._CourceId = value.Id;
					}
					else
					{
						this._CourceId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientCourse", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientCourses.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientCourses.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientDiagnostics")]
	public partial class PatientDiagnostic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _DiagnosticsDate;
		
		private int _PatientId;
		
		private int _MotionTemplateId;
		
		private double _ResultAngle;
		
		private EntityRef<MotionTemplate> _MotionTemplate;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDiagnosticsDateChanging(System.DateTime value);
    partial void OnDiagnosticsDateChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnMotionTemplateIdChanging(int value);
    partial void OnMotionTemplateIdChanged();
    partial void OnResultAngleChanging(double value);
    partial void OnResultAngleChanged();
    #endregion
		
		public PatientDiagnostic()
		{
			this._MotionTemplate = default(EntityRef<MotionTemplate>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DiagnosticsDate", DbType="DateTime NOT NULL")]
		public System.DateTime DiagnosticsDate
		{
			get
			{
				return this._DiagnosticsDate;
			}
			set
			{
				if ((this._DiagnosticsDate != value))
				{
					this.OnDiagnosticsDateChanging(value);
					this.SendPropertyChanging();
					this._DiagnosticsDate = value;
					this.SendPropertyChanged("DiagnosticsDate");
					this.OnDiagnosticsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MotionTemplateId", DbType="Int NOT NULL")]
		public int MotionTemplateId
		{
			get
			{
				return this._MotionTemplateId;
			}
			set
			{
				if ((this._MotionTemplateId != value))
				{
					if (this._MotionTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMotionTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._MotionTemplateId = value;
					this.SendPropertyChanged("MotionTemplateId");
					this.OnMotionTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultAngle", DbType="Float NOT NULL")]
		public double ResultAngle
		{
			get
			{
				return this._ResultAngle;
			}
			set
			{
				if ((this._ResultAngle != value))
				{
					this.OnResultAngleChanging(value);
					this.SendPropertyChanging();
					this._ResultAngle = value;
					this.SendPropertyChanged("ResultAngle");
					this.OnResultAngleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MotionTemplate_PatientDiagnostic", Storage="_MotionTemplate", ThisKey="MotionTemplateId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public MotionTemplate MotionTemplate
		{
			get
			{
				return this._MotionTemplate.Entity;
			}
			set
			{
				MotionTemplate previousValue = this._MotionTemplate.Entity;
				if (((previousValue != value) 
							|| (this._MotionTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MotionTemplate.Entity = null;
						previousValue.PatientDiagnostics.Remove(this);
					}
					this._MotionTemplate.Entity = value;
					if ((value != null))
					{
						value.PatientDiagnostics.Add(this);
						this._MotionTemplateId = value.Id;
					}
					else
					{
						this._MotionTemplateId = default(int);
					}
					this.SendPropertyChanged("MotionTemplate");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientDiagnostic", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientDiagnostics.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientDiagnostics.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patients")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PatientCourse> _PatientCourses;
		
		private EntitySet<PatientDiagnostic> _PatientDiagnostics;
		
		private EntitySet<PatientSchedule> _PatientSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Patient()
		{
			this._PatientCourses = new EntitySet<PatientCourse>(new Action<PatientCourse>(this.attach_PatientCourses), new Action<PatientCourse>(this.detach_PatientCourses));
			this._PatientDiagnostics = new EntitySet<PatientDiagnostic>(new Action<PatientDiagnostic>(this.attach_PatientDiagnostics), new Action<PatientDiagnostic>(this.detach_PatientDiagnostics));
			this._PatientSchedules = new EntitySet<PatientSchedule>(new Action<PatientSchedule>(this.attach_PatientSchedules), new Action<PatientSchedule>(this.detach_PatientSchedules));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientCourse", Storage="_PatientCourses", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<PatientCourse> PatientCourses
		{
			get
			{
				return this._PatientCourses;
			}
			set
			{
				this._PatientCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientDiagnostic", Storage="_PatientDiagnostics", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<PatientDiagnostic> PatientDiagnostics
		{
			get
			{
				return this._PatientDiagnostics;
			}
			set
			{
				this._PatientDiagnostics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientSchedule", Storage="_PatientSchedules", ThisKey="Id", OtherKey="PatientId")]
		public EntitySet<PatientSchedule> PatientSchedules
		{
			get
			{
				return this._PatientSchedules;
			}
			set
			{
				this._PatientSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PatientCourses(PatientCourse entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientCourses(PatientCourse entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_PatientDiagnostics(PatientDiagnostic entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientDiagnostics(PatientDiagnostic entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_PatientSchedules(PatientSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_PatientSchedules(PatientSchedule entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PatientSchedule")]
	public partial class PatientSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _PlanDate;
		
		private int _PatientId;
		
		private int _CourseId;
		
		private int _CourseOrder;
		
		private EntitySet<Session> _Sessions;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPlanDateChanging(System.DateTime value);
    partial void OnPlanDateChanged();
    partial void OnPatientIdChanging(int value);
    partial void OnPatientIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseOrderChanging(int value);
    partial void OnCourseOrderChanged();
    #endregion
		
		public PatientSchedule()
		{
			this._Sessions = new EntitySet<Session>(new Action<Session>(this.attach_Sessions), new Action<Session>(this.detach_Sessions));
			this._Course = default(EntityRef<Course>);
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlanDate", DbType="Date NOT NULL")]
		public System.DateTime PlanDate
		{
			get
			{
				return this._PlanDate;
			}
			set
			{
				if ((this._PlanDate != value))
				{
					this.OnPlanDateChanging(value);
					this.SendPropertyChanging();
					this._PlanDate = value;
					this.SendPropertyChanged("PlanDate");
					this.OnPlanDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientId", DbType="Int NOT NULL")]
		public int PatientId
		{
			get
			{
				return this._PatientId;
			}
			set
			{
				if ((this._PatientId != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIdChanging(value);
					this.SendPropertyChanging();
					this._PatientId = value;
					this.SendPropertyChanged("PatientId");
					this.OnPatientIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseOrder", DbType="Int NOT NULL")]
		public int CourseOrder
		{
			get
			{
				return this._CourseOrder;
			}
			set
			{
				if ((this._CourseOrder != value))
				{
					this.OnCourseOrderChanging(value);
					this.SendPropertyChanging();
					this._CourseOrder = value;
					this.SendPropertyChanged("CourseOrder");
					this.OnCourseOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientSchedule_Session", Storage="_Sessions", ThisKey="Id", OtherKey="PatientScheduleId")]
		public EntitySet<Session> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				this._Sessions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_PatientSchedule", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.PatientSchedules.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.PatientSchedules.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_PatientSchedule", Storage="_Patient", ThisKey="PatientId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.PatientSchedules.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.PatientSchedules.Add(this);
						this._PatientId = value.Id;
					}
					else
					{
						this._PatientId = default(int);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.PatientSchedule = this;
		}
		
		private void detach_Sessions(Session entity)
		{
			this.SendPropertyChanging();
			entity.PatientSchedule = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sessions")]
	public partial class Session : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GameId;
		
		private int _PatientScheduleId;
		
		private System.DateTime _StartTime;
		
		private System.DateTime _EndTime;
		
		private EntitySet<Attempt> _Attempts;
		
		private EntityRef<PatientSchedule> _PatientSchedule;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGameIdChanging(int value);
    partial void OnGameIdChanged();
    partial void OnPatientScheduleIdChanging(int value);
    partial void OnPatientScheduleIdChanged();
    partial void OnStartTimeChanging(System.DateTime value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.DateTime value);
    partial void OnEndTimeChanged();
    #endregion
		
		public Session()
		{
			this._Attempts = new EntitySet<Attempt>(new Action<Attempt>(this.attach_Attempts), new Action<Attempt>(this.detach_Attempts));
			this._PatientSchedule = default(EntityRef<PatientSchedule>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GameId", DbType="Int NOT NULL")]
		public int GameId
		{
			get
			{
				return this._GameId;
			}
			set
			{
				if ((this._GameId != value))
				{
					this.OnGameIdChanging(value);
					this.SendPropertyChanging();
					this._GameId = value;
					this.SendPropertyChanged("GameId");
					this.OnGameIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientScheduleId", DbType="Int NOT NULL")]
		public int PatientScheduleId
		{
			get
			{
				return this._PatientScheduleId;
			}
			set
			{
				if ((this._PatientScheduleId != value))
				{
					if (this._PatientSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._PatientScheduleId = value;
					this.SendPropertyChanged("PatientScheduleId");
					this.OnPatientScheduleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime NOT NULL")]
		public System.DateTime StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime NOT NULL")]
		public System.DateTime EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Session_Attempt", Storage="_Attempts", ThisKey="Id", OtherKey="SessionId")]
		public EntitySet<Attempt> Attempts
		{
			get
			{
				return this._Attempts;
			}
			set
			{
				this._Attempts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PatientSchedule_Session", Storage="_PatientSchedule", ThisKey="PatientScheduleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PatientSchedule PatientSchedule
		{
			get
			{
				return this._PatientSchedule.Entity;
			}
			set
			{
				PatientSchedule previousValue = this._PatientSchedule.Entity;
				if (((previousValue != value) 
							|| (this._PatientSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PatientSchedule.Entity = null;
						previousValue.Sessions.Remove(this);
					}
					this._PatientSchedule.Entity = value;
					if ((value != null))
					{
						value.Sessions.Add(this);
						this._PatientScheduleId = value.Id;
					}
					else
					{
						this._PatientScheduleId = default(int);
					}
					this.SendPropertyChanged("PatientSchedule");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attempts(Attempt entity)
		{
			this.SendPropertyChanging();
			entity.Session = this;
		}
		
		private void detach_Attempts(Attempt entity)
		{
			this.SendPropertyChanging();
			entity.Session = null;
		}
	}
}
#pragma warning restore 1591
